# frozen_string_literal: true

require "./utils"

default_platform(:ios)
setup_travis

desc "Download carthage dependencies and generate the XCWorkspace project"
lane :setup_project do
  check_carthage_installed
  check_tuist_installed
  carthage(platform: "iOS", cache_builds: true)
  sh("tuist generate -p #{Utils.project_dir}")
  set_build_number_from_plist
end

desc "Run the Unit Tests"
lane :test do |options|
  setup_project

  run_tests(scheme: "Tests", skip_slack: true)
  # if is_ci?
  #   ci_bump_build_number
  # end
end

desc "Increments build number"
lane :ci_bump_build_number do |options|
  custom_increment_build_number
  push_version_bump
end

desc "Bumps version"
desc ""
desc "- Only works on `master` branch"
desc "- Create as a new version number e.g. 2.1.8 -> 2.1.9 and 2.1.9 -> 2.2.0"
desc "- Increments the build number by 1"
desc "- Commits and pushes new version number to master"
lane :bump_version do |options|
  ensure_git_status_clean
  ensure_git_branch(branch: "master")
  
  if options[:version_name]
    custom_increment_version_number(version_number: options[:version_name])
  else
    custom_increment_version_number(bump_type: "patch")
  end

  custom_increment_build_number
  push_version_bump(add_tag: true)
end

private_lane :push_version_bump do |options|
  version = current_version

  sh("git checkout master")
  commit_message = "[ci skip] Version bumped to #{version[:display]}"
  
  git_commit(path: Utils.info_plist, message: commit_message)

  if options[:add_tag]
    commit_tag = "v#{version[:name]}"
    add_git_tag(tag: commit_tag)
  end

  push_to_git_remote
end

private_lane :current_version do
  version_number = get_version_number(xcodeproj: Utils.xcodeproj)
  build_number = get_build_number(xcodeproj: Utils.xcodeproj)
  version_display = "#{version_number} (Build #{build_number})"
  {
    name: version_number,
    code: build_number,
    display: version_display,
  }
end

private_lane :set_build_number_from_plist do
  build_number = get_info_plist_value(path: Utils.info_plist, key: "CFBundleVersion")
  UI.important "Setting build number from plist: #{build_number}"
  increment_build_number(
    build_number: build_number,
    xcodeproj: Utils.xcodeproj
  )
end

private_lane :custom_increment_build_number do |options|
  params = { xcodeproj: Utils.xcodeproj }.merge(options)
  increment_build_number(params)
end

private_lane :custom_increment_version_number do |options|
  params = { xcodeproj: Utils.xcodeproj }.merge(options)
  increment_version_number(params)
end

#Checks
private_lane :check_tuist_installed do
  detection_exec = `which tuist`
  if detection_exec.include?("not found") || detection_exec.empty?
    UI.error("You have to install Tuist to use this lane")
    UI.error("Install it running:")
    UI.command("bash <(curl -Ls https://install.tuist.io)")
    UI.user_error!("Install Tuist and start your lane again!")
  end
  UI.success("Tuist detected!")
end

private_lane :check_carthage_installed do
  detection_exec = `which carthage`
  if detection_exec.include?("not found") || detection_exec.empty?
    UI.error("You have to install Carthage to use this lane")
    UI.error("Install it via homebrew:")
    UI.command("brew install carthage")
    UI.user_error!("Install Carthage and start your lane again!")
  end
  UI.success("Carthage detected!")
end
